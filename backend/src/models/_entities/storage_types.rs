//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "storage_types")]
pub struct Model {
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::acstor_features_to_storage_types::Entity")]
    AcstorFeaturesToStorageTypes,
}

impl Related<super::acstor_features_to_storage_types::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AcstorFeaturesToStorageTypes.def()
    }
}

impl Related<super::acstor_features::Entity> for Entity {
    fn to() -> RelationDef {
        super::acstor_features_to_storage_types::Relation::AcstorFeatures.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::acstor_features_to_storage_types::Relation::StorageTypes
                .def()
                .rev(),
        )
    }
}
